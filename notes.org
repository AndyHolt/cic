#+TITLE: Notes on: Colouring in Creator
#+AUTHOR: Andy Holt
#+SETUPFILE: adh-org-notes-export-setup.org
#+LANGUAGE: en
#+OPTIONS: num:t toc:t
#+STARTUP: overview lognoterefile
#+BIBLIOGRAPHY: /Users/adh/Projects/WritingTools/Theology.bib
#+BIBLIOGRAPHY: /Users/adh/Projects/WritingTools/Engineering.bib
#+BIBLIOGRAPHY: /Users/adh/Projects/WritingTools/PopSciHist.bib
#+BIBLIOGRAPHY: /Users/adh/Projects/WritingTools/Lit.bib
#+CREATED_DATE: <2024-01-26 Fri 10:02>

* Process
- Apply grayscale canny filter, using a basic Gaussian blur, sobel edge
  detection, and normal approaches to non-maximum suppression and threshold
  suppression.
- Quality of output is ok, but not great. Often edges lines are doubled or
  tripled. Noise and texture gets quite a lot of representation in final output,
  and edges between colours which are different, but have similar colours, are
  not found well.
- Implemented proper discrete Gaussian filter. Runs a bit faster, allows easier
  selection of blurring radius. See notes below on the challenges of
  implementing this.
* Further ideas
- [X] Consider using the multi-channel colour information to improve edge detection
  by applying sobel filter to each colour channel independently, and then
  combining the results in some way (perhaps through normalised sum of squares,
  or RMS?)
- [X] Try using a clustering algorithm on pixel colours, in order to group similar
  pixels into large areas of uniform colour. See effects in
  [cite:@bishop2023deeplearning p. 465]. Collecting pixels into clusters, then
  setting values according to place in that cluster can give a nice,
  slightly cartoon-ish, flattened effect. Choosing K-value is important, but low
  values seem to have quite a nice effect.
- [ ] Open output file after creating
- [ ] Fine tuning of clustering feature
  - [ ] Look at dividing cost function by number of pixels
  - [ ] Convergence and completion
  - [ ] Initialisation: try setting means in R, G and B channels (i.e. {255, 0,
    0}, {0, 255, 0} and {0, 0, 255}) if k >= 3, and if k >= 5, try {255, 0, 0},
    {0, 255, 0}, {0, 0, 255}, {255, 255, 255}, {0, 0, 0}. Any further means
    beyond 3/5 can be randomly assigned, as already doing.
  - [ ] Investigate effects and performance, e.g. on a down-sampled image?
    Effect seems not to be particularly good at full size, image quite noisy.
  - [ ] How about applying Gaussian filter for smoothing, then k-means? That
    could work?
- [ ] Use more than one adjacent pixel in non-maximum suppression, in direction of
  edge, in order to avoid having multiple local maxima giving multiple edges.
- [ ] Try using alternative edge detection methods, such as Frei-Chan (see
  [[https://www.rastergrid.com/blog/2011/01/frei-chen-edge-detector/][Frei-Chen]]), Kovalevsky (good for similar-intensity-but-different-colour edges)
- [ ] For threshold suppression, try only comparing pixels along edge direction,
  to ensure only lines are followed. This may also help reduce double edge
  effects.
- [ ] Try to find a good heuristic for setting threshold levels
- [ ] Use threshold levels to paint broader lines, with dark colour, perhaps
  making lighter lines equally dark but thinner? I.e. where a pixel has major
  edge, make that a circle of diameter, say, five pixels. We need to first
  handle the multiple parallel edges with non-maximum suppression. But if we
  have got clear lines, we can then use them for picking the lines.
- [ ] Create web app
  - React frontend?
  - Will need to find how to serialise image data to send from backend to
    frontend.
* Important concepts
- Discrete Gaussian kernel: It is possible to calculate a proper discrete
  Gaussian kernel, which maintains the properties of a continuous Gaussian
  kernel. But it seems that many approaches, and most explanations, simply
  sample the continuous distribution or substitute a lookup table of values,
  obtained by some method. E.g. R. Fisher et al in Hypermedia Image Processing
  Reference ([[https://homepages.inf.ed.ac.uk/rbf/HIPR2/gsmooth.htm][Spatial Filters - Gaussian Smoothing]]) give the results of
  integrating a Gaussian over each pixel width.

  But other than calling library functions, I have not been able to find a way
  of actually calculating/generating a discrete Gaussian kernel based on Bessel
  functions. [[https://en.wikipedia.org/wiki/Scale_space_implementation#The_discrete_Gaussian_kernel][Wikipedia]] describes the function, but does not suggest anything
  about its implementation, or describe it in a way that gives any obvious
  approach.

  See some discussion at [[https://www.rastergrid.com/blog/2010/09/efficient-gaussian-blur-with-linear-sampling/][RasterGrid]] on implementing Guassian blurring.

  For discussion of different implementation approaches, and some advice on
  choosing kernel size based on Gaussian variance, see
  [[https://dsp.stackexchange.com/questions/10057/gaussian-blur-standard-deviation-radius-and-kernel-size][Standard
  Deviation, Radius and Kernel Size - Signal Processing Stack Exchange]].

  In order to implement a Bessel based discrete Gaussian kernel, I used the
  Modified Bessel Go function in the package =github.com/cpmech/gosl/fun=. While
  this seems to be an excellent package, it is huge and has several large
  dependencies which must be installed separately, including ~fftw~ (FFTs), ~LAPACK~
  (linear algebra package), ~OpenBLAS~ (Basic Linear Algebra Subprograms),
  ~suite-sparse~ (suite of tools for sparse matrices), and ~MUMPS~ (a sparse matrix
  solver). None of these are needed for evaluating Bessel functions, but for
  other components of the GOSL package I am not using. Therefore, it would be
  extremely useful to extract the Bessel function code from the GOSL package and
  import it as a standalone and sleek package. (But I need to make sure that
  this approach works before I optimise it).
* Extending Sobel filter to use colour information
Attempting to apply the Sobel filter in 3 colours. The major disadvantage of
working with grayscale images is that colours which are similar in overall
intensity, but quite different in colour (hue) do not give good boundaries. We
can try to use the colour information to give a better separation between
different colours of similar intensity. But we need to be careful that the
contribution of each channel does not cancel out.

When working in grayscale, the Sobel filter gives values \(g_x\) and \(g_y\). We
then get the edge magnitude with:
#+NAME: sobel-magnitude
\begin{equation}
  G = \sqrt{g_x^2 + g_y^2}
\end{equation}
and the direction with:
#+NAME: sobel-orientation
\begin{equation}
  \Theta = \arctan \left( \frac{g_y}{g_x} \right)
\end{equation}

Now we need to extend this concept to get the magnitude and direction of
gradients from the colour information of the RGB channels, ensuring that a
difference in one channel accompanied by an equal and opposite difference in
another channel does not cancel out. So we need to get some values for \(g_x\)
and \(g_y\) which represent the combined magnitude of gradient of each colour in
the \(x\) and \(y\) directions respectively.

From applying the Sobel filter to each gradient, we can get the results:
#+NAME: vectorgx
\begin{equation}
  \mathbf{g}_x =
  \begin{bmatrix}
    g^R_x \\
    g^G_x \\
    g^B_x
  \end{bmatrix}
\end{equation}
#+NAME: vectorgy
\begin{equation}
  \mathbf{g}_y =
  \begin{bmatrix}
    g^R_y \\
    g^G_y \\
    g^B_y
  \end{bmatrix}
\end{equation}
Two possible methods seem like good candidates for converting these vectors into
a scalar value, without cancelling out contributions in the different
dimensions. The first is to take the sum of absolute values, and normalise it:
#+NAME: sav-x
\begin{equation}
  g_x = \frac{|g^R_x| + |g^G_x| + |g^B_x|}{3}
\end{equation}
#+NAME: sav-y
\begin{equation}
  g_y = \frac{|g^R_y| + |g^G_y| + |g^B_y|}{3}
\end{equation}
A second method is to take the sum of squares, normalised:
#+NAME: sos-x
\begin{equation}
  g_x = \frac{1}{9} \sqrt{g^{R2}_x + g^{G2}_x + g^{B2}_x}
\end{equation}
#+NAME: sos-y
\begin{equation}
  g_y = \frac{1}{9} \sqrt{g^{R2}_y + g^{G2}_y + g^{B2}_y}
\end{equation}
We'll try both and see how the result appear.

Results:
